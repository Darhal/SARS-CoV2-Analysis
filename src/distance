import numpy as np

def distance_de_Levenshtein(ch1, ch2):
    l1 = len(ch1)
    l2 = len(ch2)
    d = np.zeros((l1, l2))

    for i in range(l1):
        d[i, 0] = i
    print(d)

    for j in range(l2):
        d[0, j] = j
    print(d)

    for i in range(l1):
        for j in range(l2):

            if ch1[i] == ch2[j]:
                cout = 0

            else:
                cout = 1
                d[i,j] = min(d[i-1, j] + 1, d[i,   j-1] + 1, d[i-1, j-1])

    return d

print(distance_de_Levenshtein("souvent", "souvant"))


def levenshtein(s1, s2):
    if len(s1) < len(s2):
        return levenshtein(s2, s1)

    # len(s1) >= len(s2)
    if len(s2) == 0:
        return len(s1)

    previous_row = range(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            insertions = previous_row[j + 1] + 1  # j+1 instead of j since previous_row and current_row are one character longer
            deletions = current_row[j] + 1  # than s2
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row

    return previous_row[-1]

